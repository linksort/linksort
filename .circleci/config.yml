# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  test:
    working_directory: ~/repo
    docker:
      - image: circleci/golang:1.17
      - image: candis/mongo-replica-set
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install Dependencies
          command: go mod download
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Run tests
          command: |
            go test -v ./...

  build_and_upload:
    working_directory: ~/repo
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Install AWSCLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            rm -rf ./aws awscliv2.zip
      - run:
          name: Configure AWSCLI
          command: |
            aws configure set default.aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set default.aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region us-east-1
            aws configure set default.output text
      - run:
          name: Install lightsailctl
          command: |
            sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
            sudo chmod +x /usr/local/bin/lightsailctl
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - checkout
      - run:
          name: Generate .netrc
          command: |
            echo "machine github.com login LinksortMachine password $PRIVATE_DEP_KEY" > ./.netrc
      - run:
          name: Build Image
          command: docker build -t ls -f docker/main-dockerfile --build-arg REACT_APP_SENTRY_DSN=$REACT_APP_SENTRY_DSN .
      - run:
          name: Upload Image
          command: aws lightsail push-container-image --service-name ls-prod --image ls --label ls-full-$(echo $CIRCLE_SHA1 | head -c 8)

  deploy:
    working_directory: ~/repo
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Install AWSCLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            rm -rf ./aws awscliv2.zip
      - run:
          name: Configure AWSCLI
          command: |
            aws configure set default.aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set default.aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region us-east-1
            aws configure set default.output json
      - run:
          name: Install envsubst
          command: |
            sudo apt-get update
            sudo apt-get -y install gettext-base
      - checkout
      - run:
          name: Initiate deployment
          command: |
            export LATEST_IMAGE=$(aws lightsail get-container-images --service-name ls-prod | jq '.containerImages[0].image')
            export ENV_DETAILS=$(aws lightsail get-container-service-deployments --service-name ls-prod | jq '.deployments[0].containers.main.environment')
            cat .circleci/deployment.json.tpl | envsubst > deployment.json
            aws lightsail create-container-service-deployment --cli-input-json file://deployment.json > /dev/null
      - run:
          name: Poll deployment
          command: |
            for i in {1..60}
            do
              sleep 10
              case $(aws lightsail get-container-service-deployments --service-name ls-prod | jq '.deployments[0].state') in
              '"ACTIVE"')
                echo "Deployment succeeded"
                exit 0
                ;;
              '"FAILED"')
                echo "Deployment failed"
                exit 1
                ;;
              *)
                echo "Poll $i"
                ;;
              esac
            done
            echo "Polling timed out"
            exit 1

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  all:
    jobs:
      - test
      - build_and_upload:
          context:
            - AWS
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - deploy:
          context:
            - AWS
          requires:
            - test
            - build_and_upload
          filters:
            branches:
              only:
                - main
